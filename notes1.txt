Unit tests and Functional Tests:
-----------------------------------------------------------------------
The TDD approach I’m following wants our application to be
covered by both types of test. Our workflow will look a bit like this:
1. We start by writing a functional test, describing the new functionality from
    the user’s point of view.

2. Once we have a functional test that fails, we start to think about how to
    write code that can get it to pass (or at least to get past its current
    failure). We now use one or more unit tests to define how we want our code
    to behave—​the idea is that each line of production code we write should be
    tested by (at least) one of our unit tests.

3. Once we have a failing unit test, we write the smallest amount of application
     code we can, just enough to get the unit test to pass. We may iterate between
     steps 2 and 3 a few times, until we think the functional test will get a little
     further.

4. Now we can rerun our functional tests and see if they pass, or get a little further.
     That may prompt us to write some new unit tests, and some new code, and so on.

------------------------------------------------------------------------------------

=====================================================================================
Functional tests should help you build an application with the right functionality,
 and guarantee you never accidentally break it.
 Unit tests should help you to write code that’s clean and bug free.
=======================================================================================


On refactoring.
=====================================================================================

TDD PROCESS:
* Functional tests
* Unit test
* The unit-test/code cycle
* Refactoring


====================================================================================

Red / Green / Refactor and Triangulation

unit-test code cycle:
* writing unit test                 ---> RED
* Writing simplest possible code    ---> GREEN
* writing better code               ---> Refactor

            Triangulation : writing another test to force yourself to write a better code.
=========================================================================================

To run functional tests:    python manage.py test functiona_tests/
To run unit tests:    python manage.py test lists/

# using grep to view class names and fucntional names:
$ grep -E "class|def" lists/tests.py
 
